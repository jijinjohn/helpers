"******************************************************************************
"		Created and Maintained by Jijin John Manalikkal
"******************************************************************************

set nocompatible

syntax on

"Maximum number of tabs that can be opened initially
set tabpagemax=30

" tab == x spaces
set tabstop=4

" used for auto indent
set shiftwidth=4

set mouse= 

set t_Co=256

#colo ir_black

set background=dark

" Awesome menu that shows all possibilities in command line
set wildmenu

" Ignore these files in the wildmenu
set wildignore=*.o,*.obj,*.bak,*.exe,*.py[co],*.swp,*~,*.pyc,.svn

filetype plugin on

set smartindent

"Show command in bottom right
set showcmd

set incsearch

"Line number, etc etc--but the status line make this kinda redundant
set ruler

"Jump to corresponding parenthesis and stuff will coding--quite useful
set showmatch

" matchtime: tenths of a second to show a match 
set matchtime=6 

set hlsearch

" Type // to remove highlighting instead of /fdafdasfdasfdas
nmap //  :nohlsearch<CR>

"Checks if there is tags in current folder, else goes up till / to find them
"out
set tags=./tags;

"If there are more than one tag result, then show a list...probably cscope.vim
"will make this one obsolete
"noremap  <C-]>  g<C-]>

set backspace=indent,eol,start

map <C-Up> gT

map <C-Down> gt

"Navigate changelist + goes back - goes forward
nnoremap + g;
nnoremap - g,

"Y should yank to the end of the line like C and D
nmap Y y$

" Abbreviations in insert mode
iab \d printf("[Jman][%s:%d] In function %s \n",__FILE__,__LINE__,__FUNCTION__);
iab \j /*Jijin--made changes here*/
iab \z #if 0000
iab \e #endif /* 0000 */
iab \l #else

set splitright
set splitbelow

" report: show a report when N lines were changed. 0 means 'all' 
set report=0 

" laststatus: show status line? Yes, always! 
set laststatus=2 

" statusline: filename, filetype, row/maxrow, col, % of file, flags set
set statusline=%-25.100F\ %-2.9y%=%4l/%-4L\ %3.5v\ %3.3p%%%a%r%m 

" viminfo: What info to store from an editing session in the viminfo " file;
" can be used at next session. 
set viminfo='100,<500,s50,:300,h,/80

" scrolloff sets the minimum number of lines that should be there
" above and below the cursor
set scrolloff=2

" AVOID STAIRCASES!!!!!!!!!!!Use paste only when you want to!!!!
set pastetoggle=<F5>

" Cscope stuff
" use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
set cscopetag

" check cscope for definition of a symbol before checking ctags: set to 1
" if you want the reverse search order.
set csto=1

" show msg when any other cscope db added
set cscopeverbose

" The following maps all invoke one of the following cscope search types:
"   's'   symbol: find all references to the token under cursor
"   'g'   global: find global definition(s) of the token under cursor
"   'c'   calls:  find all calls to the function name under cursor
"   't'   text:   find all instances of the text under cursor
"   'e'   egrep:  egrep search for the word under cursor
"   'f'   file:   open the filename under cursor
"   'i'   includes: find files that include the filename under cursor
"   'd'   called: find functions that function under cursor calls

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>	
"Me too lazy to type C-\g to find the definition--and if i want to use
"cscope's result instead of ctags
nmap <C-\><C-\> :cs find g <C-R>=expand("<cword>")<CR><CR>	
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>	
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>	
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>	
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>	
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>	
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>	

" For a vert split with cscope... this is ctrl-space btw
"nmap <C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>	
"nmap <C-@>i :vert scs find i <C-R>=expand("<cfile>")<CR>$<CR>	
"nmap <C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

" For a tab split with cscope - I realized that I don't use vsplit eitherway
" and this is more nifty
nmap <C-@>s :tab split<CR>:cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@> :tab split<CR>:cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :tab split<CR>:cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :tab split<CR>:cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :tab split<CR>:cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :tab split<CR>:cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :tab split<CR>:cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :tab split<CR>:cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :tab split<CR>:cs find d <C-R>=expand("<cword>")<CR><CR>

" Move cscope results to quickfix window
" No f- here
set cscopequickfix=s-,d-,c-,t-,e-,i-
nnoremap j <Esc>:cn<CR>
nnoremap k <Esc>:cp<CR>

" To jump between splits
" More importantly, to jump to and from quickfix window
nnoremap h <Esc><C-w><C-w>

" Page down - l
nnoremap l <C-f>
" Page up - ll
nnoremap ll <C-b>

" Number of milliseconds after which a sequence of keys is accepted
" Relevant for the l and ll mapping
" Otherwise a page down using l takes an extraordinary amount of time
" So changed default(1000) to 300ms
" Too small a value messes up cscope shortcuts
" So 300 was increased to 650
" Requires further feedback
" I could probably live with a 650ms delay for page downs
set timeoutlen=650

" Cscope Stuff done

" Autoload cscope databases
function! LoadCscope()
  let db = findfile("cscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/cscope.out$"))
    set nocscopeverbose
    exe "cs add " . db . " " . path
    set cscopeverbose
  endif
endfunction

call LoadCscope()

" Experimental stuff
" for vimdiffing
"map <F2> <Esc>]c
"map <F3> <Esc>do

" to see jumplist
"map <F3> <Esc>:ju<CR>
" To copy the output of the previous command in "P
"map <F3> <Esc> :redir > /tmp/redir | :@: | :redir END

" This gives a list of all occurences of the word in current file
" Should use this more often
" This is called ilist
" ]I gives the same list, but starting from current cursor position
" The function is a better way.
" map <F4> <Esc>[I

" This function is good, but the one below is better
"function! WordOccurance()
"    redir => output
"        silent! exec join(['ilist', expand('<cword>')], ' ')
"    redir END
"    let lines = split(output, '\n')
"    if lines[0] =~ '^Error detected'
"        echomsg "Could not find the word in file"
"        return
"    endif
"    let [filename, line_info] = [lines[0], lines[1:-1]]
"    let qf_entries = map(line_info, "{
"            \ 'filename': filename,
"            \ 'lnum': split(v:val)[1],
"            \ 'text': getline(split(v:val)[1])
"            \ }"
"        \ )
"    call setqflist(qf_entries)
"    cwindow
"endfunction
"noremap <silent> <F4> :call WordOccurance()<CR>

" show :ilist or ]I results in the quickfix window
function! s:ilist_qf(start_at_cursor)
  redir => output
    silent! exec 'normal! '.(a:start_at_cursor ? ']' : '[')."I"
  redir END
  let lines = split(output, '\n')
  if lines[0] =~ '^Error detected'
    echomsg "Could not find the word in file"
    return
  endif
  let [filename, line_info] = [lines[0], lines[1:-1]]
  "turn the :ilist output into a quickfix dictionary
  let qf_entries = map(line_info, "{
        \ 'filename': filename,
        \ 'lnum': split(v:val)[1],
        \ 'text': getline(split(v:val)[1])
        \ }")
  call setqflist(qf_entries)
  cwindow
endfunction
noremap <silent> [I :call <sid>ilist_qf(0)<CR>
noremap <silent> ]I :call <sid>ilist_qf(1)<CR>
nmap <F4> [I

map <F6> <Esc>:make<CR>
"map <F6> <Esc>:set cscopequickfix=s-,g-,d-,c-,t-,e-,i-<CR>

"toggle between quickfix lists
map <F7> <Esc>:cold<CR>
map <F8> <Esc>:cnew<CR>

map <F9> <Esc>:tab split<CR>
map <F10> <Esc>:q<CR>

" BYTE SPACED HEX!!!!!!!!!!!
map <F11> <Esc>:%!xxd -g 1<CR>
map <F12> <Esc>:%!xxd -r<CR>

" Open quickfix window
nmap zz <Esc>:cwindow<CR>
" We want this only for the quickfix window
au BufRead quickfix setlocal nu
au BufRead quickfix setlocal statusline=%-25.85F\ %-2.9y%=%4l/%-4L\ %3.3v\ %3.3p%%%a%r%m

" Silly stuff to toggle hls...but is it worth it?
"function ToggleHLSearch()
"       if &hls
"            set nohls
"       else
"            set hls
"       endif
"endfunction
"
"nmap <silent> <F4> <Esc>:call ToggleHLSearch()<CR>

autocmd VimEnter * echo "Jijin's vimrc is loaded - Crazy things may happen - You have been warned"

" Jijin - create a new group for braces and colour them
" Doesn't work as of now :(
" It does... ignore comments above
function! ColorBraces()
	syn match Braces display '[{}()\[\]]'
	hi Braces ctermfg=lightgreen cterm=bold
endfunction

autocmd BufRead,BufNewFile * call ColorBraces()

" Do a tab split and then then show all the changes made from the original file
" The tab split was my idea - heheh
" The ! prevents warning while sourcing vimrc
command! DiffOrig tab split | vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis

" Source vimrc everytime it is saved
autocmd BufWritePost .vimrc source %
" If I'm using jvimrc on another machine
"autocmd BufWritePost jvimrc source %

" Bunch of abbreviations for help with documentation
"iab \x {extras}
"iab \t {TODO}
""iab \b {below}
"iab \b {explained elsewhere}
"iab \m {misc info}
"iab \n --- ---
"iab \p {pseudocode}
"iab \c {read code}

" temporary functions
"function! SourceColours()
"	source colors
"endfunction
"
"map <F3> <Esc>:call SourceColours()<CR>

" Use spaces instead of tabs and 1 tab = 4 spaces
" To insert a real tab when 'expandtab' is on, use CTRL-V<Tab>.
" Jijin - unless everyone uses it, this option just messes up code
"set tabstop=4
"set shiftwidth=4
"set expandtab

" Jijin - No idea why I need to do this
" But this seems to give me the best combination of colours with ir_black
set background=light
set background=dark

" Jijin - experiments - trying to map jk to esc and seeing if it'll stick
inoremap jk <esc>
